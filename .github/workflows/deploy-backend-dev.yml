name: Backend-CI/CD Development Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'packages/backend/src/*'

env:
  REGISTRY_NAME: 'webserver-develop-ecr'
  SERVICE_NAME: 'webserver-develop-service'
  CLUSTER_NAME: 'webserver-develop-cluster'
  CONTAINER_NAME: 'webserver-develop-ecs-container'
  TASK_DEFINITION_FAMILY: 'webserver-develop-ecs-task-definition'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: node
    steps:
      - uses: actions/checkout@v3
      - run: yarn install --frozen-lockfile
      - run: yarn nx run-many --target=lint --projects=backend "--ci"
      - run: yarn nx run-many --target=test --projects=backend "--ci"
  deploy:
    name: Deploy Develop
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set GitHub env variables
        shell: bash
        run: echo "IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/} | tr / -)-$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOP }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOP }}
          aws-region: ${{ secrets.AWS_REGION_DEVELOP }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.REGISTRY_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.REGISTRY_NAME }}:${{ env.IMAGE_TAG }}
      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition "${{ env.TASK_DEFINITION_FAMILY }}" --query taskDefinition > task-definition.json
      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.REGISTRY_NAME }}:${{ env.IMAGE_TAG }}
      - name: Shutdown cluster
        run: aws ecs update-service --desired-count 0 --cluster "${{ env.CLUSTER_NAME }}" --service "${{ env.SERVICE_NAME }}"
        shell: bash
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          force-new-deployment: true
          wait-for-service-stability: true
      - name: Wait for service to stabilize
        run: aws ecs update-service --desired-count 1 --cluster "${{ env.CLUSTER_NAME }}" --service "${{ env.SERVICE_NAME }}"
        shell: bash
