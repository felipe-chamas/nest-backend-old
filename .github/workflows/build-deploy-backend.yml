

name: Backend-CI/CD

env: 
  BK_URL_ENV: 'api.develop.theharvestgame.io' 
  GIT_HASH: $(git rev-parse --short "$GITHUB_SHA")
  GIT_NAME_SLUG: ${GITHUB_REF#refs/heads/}
  RELEASE: latest

on:
  #push:
  #  branches: [ backend-develop ]
  pull_request:
    branches: [ backend-develop ]

jobs:

  Build:
    name: Build Development
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      
      - name: Set env variables 
        run: |
<<<<<<< HEAD
          echo "PORT=${{ secrets.PORT }}" > .env 
=======
          echo "PORT=${{  secrets.PORT }}" > .env 
>>>>>>> 59f1883b95ed9d6377e02f5ab7e8da4de3f1b6c3
          echo "DB_NAME=${{ secrets.DB_NAME }}
               DB_USERNAME=${{ secrets.DB_USERNAME }}
               DB_PASSWORD=${{ secrets.DB_PASSWORD }}
               MONGODB_URI=${{ secrets.MONGODB_URI }}
               TYPEORM_CONNECTION=${{ secrets.TYPEORM_CONNECTION }}
               TYPEORM_URL=${{ secrets.TYPEORM_URL}}
               TYPEORM_ENTITIES=${{ secrets.TYPEORM_ENTITIES }}
<<<<<<< HEAD
               TYPEORM_LOGGING=${{ secrets.TYPEORM_LOGGING }}" >> .env
=======
               TYPEORM_LOGGING=${{ secrets.TYPEORM_LOGGING }} >> .env
>>>>>>> 59f1883b95ed9d6377e02f5ab7e8da4de3f1b6c3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REGISTRY_NAME }}
          IMAGE_TAG: ${{ env.RELEASE }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  DeployDevelopment:
     name: Deploy Development
     if: github.event.ref == 'refs/heads/develop'
     runs-on: ubuntu-latest
     needs: [Build]
     environment: 
       name: Development
       url: ${{ env.BK_URL_ENV }}
     steps:
       - uses: actions/checkout@v1
<<<<<<< HEAD

=======
       
>>>>>>> 59f1883b95ed9d6377e02f5ab7e8da4de3f1b6c3
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ secrets.AWS_REGION }}
       
       - name: Fill in the new image ID in the Amazon ECS task definition
         id: task-def
         uses: aws-actions/amazon-ecs-render-task-definition@v1
         with:
           task-definition: .github/tasks/task-definition.json
           container-name: ${{ secrets.REGISTRY_NAME }}-ctnr
           image: ${{ steps.build-image.outputs.image }}

       - uses: actions/checkout@v2
       - id: install-aws-cli
         uses: unfor19/install-aws-cli-action@v1
         with:
           version: 2

       - run: aws ecs update-service --desired-count 0 --cluster " ${{ secrets.SERVICE_NAME }}" --service "${{ secrets.CLUSTER_NAME }}"
         shell: bash

       - name: Deploy Amazon ECS task definition
         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
         with:
           task-definition: ${{ steps.task-def.outputs.task-definition }}
           service: ${{ secrets.SERVICE_NAME }}
           cluster: ${{ secrets.CLUSTER_NAME }}
           force-new-deployment: true
           wait-for-service-stability: true

       - run: aws ecs update-service --desired-count 1 --cluster " ${{ secrets.SERVICE_NAME }}" --service "${{ secrets.CLUSTER_NAME }}"
         shell: bash