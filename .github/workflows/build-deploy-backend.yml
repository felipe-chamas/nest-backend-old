name: Backend-CI/CD Production

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Deploy Production
        required: false


jobs:
  Build:
    name: Build Producion
    runs-on: ubuntu-latest

    steps:
      - name: Set GitHub env variables
        shell: bash
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "RELEASE=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Set env variables
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env 
          echo "DB_NAME=${{ secrets.DB_NAME }}
               DB_USERNAME=${{ secrets.DB_USERNAME }}
               DB_PASSWORD=${{ secrets.DB_PASSWORD }}
               MONGODB_URI=${{ secrets.MONGODB_URI }}
               TYPEORM_CONNECTION=${{ secrets.TYPEORM_CONNECTION }}
               TYPEORM_URL=${{ secrets.TYPEORM_URL}}
               TYPEORM_ENTITIES=${{ secrets.TYPEORM_ENTITIES }}
               TYPEORM_LOGGING=${{ secrets.TYPEORM_LOGGING }}
               AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
               AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
               AWS_REGION=${{ secrets.AWS_REGION }}
               AWS_SQS_QUEUE_URL=${{ secrets.AWS_SQS_QUEUE_URL }}" >> .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REGISTRY_NAME }}

        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          IMAGE_TAG=${{ env.BRANCH }}-${{ env.RELEASE }}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  DeployProduction:
    name: Deploy Production
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [Build]
    environment:
      name: Production
    steps:
      - name: Set GitHub env variables
        shell: bash
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "RELEASE=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v2
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Download task definition      
        run: |
          aws ecs describe-task-definition --task-definition "${{ secrets.TASK_DEFINITION_FAMILY }}" --query taskDefinition > .github/tasks/task-definition.json
          IMAGE="${{ env.BRANCH }}-${{ env.RELEASE }}"
          sed -i -r "s|(\"image\"):(.*):(.*)|\1:\2:$IMAGE\",|" .github/tasks/task-definition.json

          
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/tasks/task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: '${{ secrets.REGISTRY_NAME }}:${{ env.BRANCH }}-${{ env.RELEASE }}'

      - run: aws ecs update-service --desired-count 0 --cluster "${{ secrets.CLUSTER_NAME }}" --service "${{ secrets.SERVICE_NAME }}"
        shell: bash

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_NAME }}
          force-new-deployment: true
          wait-for-service-stability: true

      - run: aws ecs update-service --desired-count 1 --cluster "${{ secrets.CLUSTER_NAME }}" --service "${{ secrets.SERVICE_NAME }}"
        shell: bash
