import { ContractName, Signer, Address } from './types';
import * as typechain from './typechain';
import { ErrorCodes, GeneralError } from './errors';
// this import file is generated by generate-helper-types.ts
import { wrapContractResolveWithContractTypes } from './typechain/helpers';

export type ResolveContractFunctionBase = (
  contractName: ContractName,
  address: Address,
) => unknown;

export class ContractResolver {
  constructor(private readonly signer: Signer) {}

  private resolveWithNoTypeSupport: ResolveContractFunctionBase = (
    contractName: ContractName,
    address: Address,
  ) => {
    const factoryName = contractName + '__factory';
    const factory = typechain[factoryName as keyof typeof typechain];
    if (!factory)
      throw new GeneralError(
        ErrorCodes.not_supported_contract_factory,
        `factory ${factoryName} is not found.`,
      );
    return factory.connect(address, this.signer);
  };

  resolve = wrapContractResolveWithContractTypes(
    this.resolveWithNoTypeSupport.bind(this),
  );
}
